5075AE29-86EE-9A95-AC60-B2B5F1892C13

VoxelVerse todo


need to display ammo for gun models in voxel model panel - Or just allow infinity ammo
HashTag not set in import
SoundRange not set on import?
dynamic lighting on all of dragon
engine block on zeppelin does not light correctly 3.29.17
if model is deleted from region models, the animation and script panels are not updated.
adding -inline to the release compiler options causes function initializeDataBeforeSplash() to throw exceptions
check collision for objects, make sure they are not all check everything every frame. Only selected object should do that, or ones that have collision.
could use a bitmapdisplacement filter on water overlay to give it the moving water effect.

need to add clipVelocity and speedMultiplier to animation editor

When deleting a model that has inventory, make sure to delete its inventory.

! 12.1.16 need to add clipVelocity and speedMultiplier to rest of the animations, and to the setState, so that they are not hard coded.
! 12.4.16 static lighting on head of dragon

For voice
https://wiki.mumble.info/wiki/Main_Page


https://news.ycombinator.com/item?id=14149570
https://voodoomfg.com/jobs/product-manager
https://increment.com/
https://www.susanjfowler.com/blog/2016/8/13/so-you-want-to-learn-physics
https://angel.co/cinchapi/jobs/224159-software-engineer-frontend
https://en.wikipedia.org/wiki/CAP_theorem
https://www.linkedin.com/jobs/view/296843203/

ABD7501A-8ECE-4571-10ED-9D33ACF0DCFD - Torch
C9389DB5-7A87-A5D8-2495-445D8391CDC1 - Pistol
2E077FF7-A065-B77D-EAFD-DEDBB97DA597 - Pick

What is VoxelVerse.

My goal is to create a platform we everyone is able to create and share 3D models.

How do you choose models that can be added to a parent model. - Models that are smaller than the parent, and not children of something else.

Look AT
lightsStaticSetDefault
remove quadsRebuildAll - since it does force a rebuild, and the rebuild should happen at the parent level
maybe at a force parementer

Notes on checking
OxelDataEvent member changed from oxelData to oxelPersistence

copy of our drivers license.

in lighting
// this returns a composite color made of default color plus any additional colors for the indicated corner
	public function lightGetComposite( $face:int, $corner:uint, $tint:uint ):uint {
		_compositeColor = 0;
		
		for ( var i:int = 0; i < _lights.length; i++ ) {
			var li:LightInfo = _lights[i];
			_compositeColor = ColorUtils.combineARGBLights( _compositeColor, li.color, li.illuminationLevelGet( $corner ) );
		}

		// took this out of the vertex information in the shader
		// adds a little more work here, but removes it from the data send down with the quad from 4 ints to 3 ints.
		// so makes the update 12% faster since the vertex data is the same.
		_compositeColor = ColorUtils.multiplyRGBByTint( _compositeColor, $tint );
		
		if ( Lighting.eaoEnabled ) {
			var cornerAttn:uint = cornerForFace( $face, $corner );
			if ( 0 < cornerAttn ) {
				cornerAttn = MAX_LIGHT_LEVEL - cornerAttn * li.attn * 2; // 4 for darker corners
				cornerAttn = Math.max( cornerAttn, 0 );
				_compositeColor = ColorUtils.placeAlpha( _compositeColor, cornerAttn );
	//			Log.out( "Brightness.lightGetComposite for corner - _compositeColor: " + ColorUtils.extractAlpha( _compositeColor ) );
	_compositeColor = ColorUtils.placeAlpha( _compositeColor, 0x00 );
			} else {
				_compositeColor = ColorUtils.placeAlpha( _compositeColor, MAX_LIGHT_LEVEL );
			}
		}
		return _compositeColor;
	}
	
		private function build152( $isRebuild:Boolean, $face:int, $quad:Quad, $g0:Number, $plane_facing:int, $scale:int, $grain:uint):Boolean {
		var result:Boolean;
		switch ( $face ){
			case Globals.POSX:
				result = $quad.build( $isRebuild, type, getModelX(), getModelY(), getModelZ() + 7 * $g0, $face, $plane_facing, 9 * $g0, $scale, 2 * $g0, $grain, _lighting, flowInfo);
				break;
			case Globals.NEGX:
				result = $quad.build( $isRebuild, type, getModelX() + 7 * $g0, getModelY(), getModelZ() + 7 * $g0, $face, $plane_facing, 7 * $g0, $scale, 2 * $g0, $grain, _lighting, flowInfo);
				break;
			case Globals.POSY:
				result = $quad.build( $isRebuild, type, getModelX() + 7 * $g0, getModelY(), getModelZ() + 7 * $g0, $face, $plane_facing, 2 * $g0, $scale, 2 * $g0, $grain, _lighting, flowInfo);
				break;
			case Globals.NEGY:
				result = $quad.build( $isRebuild, type, getModelX() + 7 * $g0, getModelY(), getModelZ() + 7 * $g0, $face, $plane_facing, 2 * $g0, $scale, 2 * $g0, $grain, _lighting, flowInfo);
				break;
			case Globals.POSZ:
				result = $quad.build( $isRebuild, type, getModelX() + 7 * $g0, getModelY(), getModelZ() + 7 * $g0, $face, $plane_facing, 2 * $g0, $scale, 2 * $g0, $grain, _lighting, flowInfo);
				break;
			case Globals.NEGZ:
				result = $quad.build( $isRebuild, type, getModelX() + 7 * $g0, getModelY(), getModelZ() + 7 * $g0, $face, $plane_facing, 2 * $g0, $scale, 2 * $g0, $grain, _lighting, flowInfo);
				break;
		}
		return result;
	}
build152( isRebuild, $face, quad, g0, $plane_facing, scale, $grain );