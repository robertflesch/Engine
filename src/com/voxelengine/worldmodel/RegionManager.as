/*==============================================================================
Copyright 2011-2015 Robert Flesch
All rights reserved.  This product contains computer programs, screen
displays and printed documentation which are original works of
authorship protected under United States Copyright Act.
Unauthorized reproduction, translation, or display is prohibited.
==============================================================================*/
package com.voxelengine.worldmodel
{
import com.voxelengine.events.ModelBaseEvent;
import com.voxelengine.events.WindowSplashEvent;
import com.voxelengine.Log;
import com.voxelengine.Globals;
import com.voxelengine.events.LoadingEvent;
import com.voxelengine.events.ModelEvent;
import com.voxelengine.events.RegionEvent;
import com.voxelengine.events.RoomEvent;
import com.voxelengine.events.PersistanceEvent;
import com.voxelengine.server.Network;
import com.voxelengine.server.Room;
import com.voxelengine.worldmodel.inventory.InventoryManager;
import com.voxelengine.worldmodel.models.ModelLoader;
import com.voxelengine.worldmodel.models.ModelDataCache;
import com.voxelengine.worldmodel.models.ModelMetadataCache;
import com.voxelengine.worldmodel.models.ModelInfoCache;

/**
 * ...
 * @author Bob
 */
public class RegionManager 
{
	private var _regions:Vector.<Region> = null
	private var _modelLoader:ModelLoader = new ModelLoader();
	private var _requestPublic:Boolean;
	//private var _resultsPublic:Boolean;
	private var _requestPrivate:Boolean;
	//private var _resultsPrivate:Boolean;
	
	public function get size():int { return _regions.length; }
	
	public function get regions():Vector.<Region> { return _regions; }
	
	public function get modelLoader():ModelLoader { return _modelLoader; }
	
	public function RegionManager():void 
	{
		_regions = new Vector.<Region>;

		//RegionEvent.addListener( RegionEvent.LOAD, 			regionLoad ); 
		RegionEvent.addListener( RegionEvent.JOIN, 			requestServerJoin ); 
		RegionEvent.addListener( ModelBaseEvent.REQUEST_TYPE, 	regionTypeRequest );
		RegionEvent.addListener( ModelBaseEvent.REQUEST, 		regionRequest );	
		
		RoomEvent.addListener( RoomEvent.ROOM_DISCONNECT, 	requestDefaultRegionLoad );
		RoomEvent.addListener( RoomEvent.ROOM_JOIN_SUCCESS, onJoinRoomEvent );
		
		PersistanceEvent.addListener( PersistanceEvent.LOAD_SUCCEED, 	loadSucceed );			
		PersistanceEvent.addListener( PersistanceEvent.LOAD_FAILED, 	loadFail );			
		PersistanceEvent.addListener( PersistanceEvent.CREATE_SUCCEED, 	regionCreatedHandler ); 
									  
		LoadingEvent.addListener( LoadingEvent.LOAD_CONFIG_COMPLETE, configComplete );
		
		
		
		// This adds the event handlers
		// Is there a central place to do this?
		ModelMetadataCache.init();
		ModelInfoCache.init();
		ModelDataCache.init();
		// This causes the to load its caches and listeners
		InventoryManager.init();
		MouseKeyboardHandler.init();
	}
	
	/**
	 * @param  - RegionEvent generated by a region when it has 
	 * @return - None
	 * Generates Event RegionEvent.UNLOAD if it is the current region
	*/
	private function regionLoad( $re:RegionEvent ):void
	{
		Log.out( "RegionManager.load - region: " + $re.guid, Log.DEBUG );
		WindowSplashEvent.dispatch( new WindowSplashEvent( WindowSplashEvent.CREATE ) );
		
		RegionEvent.dispatch( new RegionEvent( RegionEvent.UNLOAD, null ) );
		RegionEvent.dispatch( new RegionEvent( RegionEvent.LOAD, $re.guid ) );
	}
	
	private function regionRequest( $re:RegionEvent):void 	{
		
		if ( null == $re.guid ) {
			Log.out( "RegionManager.regionRequest guid rquested is NULL: ", Log.WARN );
			return;
		}
		Log.out( "RegionManager.regionRequest guid: " + $re.guid, Log.INFO );
		var region:Region = regionGet( $re.guid );
		if ( region ) {
			RegionEvent.dispatch( new RegionEvent( ModelBaseEvent.RESULT, region.guid, region ) );
			return;
		}
		
		if ( true == Globals.online )
			PersistanceEvent.dispatch( new PersistanceEvent( PersistanceEvent.LOAD_REQUEST, Globals.DB_TABLE_REGIONS, $re.guid ) );
		else	
			PersistanceEvent.dispatch( new PersistanceEvent( PersistanceEvent.LOAD_REQUEST, Globals.REGION_EXT, $re.guid, null, null ) );			
	}
	
	private function regionTypeRequest(e:RegionEvent):void {
		
		if ( Network.PUBLIC == e.guid && false == _requestPublic ) {
			_requestPublic = true;
			PersistanceEvent.dispatch( new PersistanceEvent( PersistanceEvent.LOAD_REQUEST_TYPE, Globals.DB_TABLE_REGIONS, Network.PUBLIC, null, Globals.DB_TABLE_INDEX_OWNER ) );			
		}
		if ( Network.userId == e.guid && false == _requestPrivate ) {
			_requestPrivate = true;
			PersistanceEvent.dispatch( new PersistanceEvent( PersistanceEvent.LOAD_REQUEST_TYPE, Globals.DB_TABLE_REGIONS, Network.userId, null, Globals.DB_TABLE_INDEX_OWNER ) );			
		}
			
		// Get a list of what we currently have
		for each ( var region:Region in _regions ) {
			if ( region && region.owner == e.guid )
				RegionEvent.dispatch( new RegionEvent( ModelBaseEvent.RESULT, region.guid, region ) );
		}
	}
	
	private function loadFail( $pe:PersistanceEvent ):void 
	{
		if ( Globals.DB_TABLE_REGIONS != $pe.table && Globals.REGION_EXT != $pe.table )
			return;
			
		Log.out( "RegionManager.loadFail - region: " + $pe.guid, Log.ERROR );
		throw new Error( "RegionManager.loadFail - why did I fail to load region PersistanceEvent: " + $pe.toString(), Log.WARN );
	}
	
	private function loadSucceed( $pe:PersistanceEvent ):void 
	{
		if ( Globals.DB_TABLE_REGIONS == $pe.table ) {
			Log.out( "RegionManager.loadSucceed - creating new region: " + $pe.guid, Log.DEBUG );
			var newRegion:Region = new Region( $pe.guid );
			newRegion.fromPersistance( $pe.dbo );
			// When I create a new region I have to create a temporary DBO to transfer metadata and data.
			// otherwise the $pe.data will be false or null. This temporary DBO must be removed before the region is saved.
			if ( $pe.data && true == $pe.data )
				newRegion.dbo = null;
			regionAdd( newRegion );
		}
		// Bad thing about this is it ignores all the metadata
		else if ( Globals.REGION_EXT == $pe.table ) {
			var region:Region = new Region( $pe.guid );
			region.initJSON( $pe.data );
			regionAdd( region );
		}
	}
	
	private function regionAdd( $region:Region ):void {
		Log.out( "RegionManager.regionAdd - adding region: " + $region.guid, Log.DEBUG );
		if ( false == regionHas( $region.guid ) ) {
			_regions.push( $region );
			RegionEvent.dispatch( new RegionEvent( ModelBaseEvent.ADDED, $region.guid, $region ) );
		}
		else
			Log.out( "RegionManager.regionAdd - NOT loading duplicate region: " + $region.guid, Log.DEBUG );
	}
	
	////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////
	
	public function configComplete( $e:LoadingEvent ):void
	{
		//startWithEmptyRegion( $e.guid );
		
		// This is used for testing
		// This tells the engine to load a local file
		loadRegionFromLocal( $e.guid )
	}
	public function startWithEmptyRegion( $guid:String ):void
	{
		var startingRegion:Region = new Region( $guid );
		startingRegion.createEmptyRegion();
		regionAdd( startingRegion );
		RegionEvent.dispatch( new RegionEvent( RegionEvent.LOAD, startingRegion.guid ) ); 
		RegionEvent.dispatch( new RegionEvent( RegionEvent.LOAD_COMPLETE, startingRegion.guid ) );
		// This tells the config manager that the local region was loaded and is ready to load rest of data.
	}
	
	public function loadRegionFromLocal( $guid:String ):void
	{
		// Add a listener to tell when file has been loaded
		RegionEvent.addListener( ModelBaseEvent.ADDED, startingRegionLoaded );
		// now request the file be loaded
		RegionEvent.dispatch( new RegionEvent( ModelBaseEvent.REQUEST, $guid ) );
	}
	
	private function startingRegionLoaded( $re:RegionEvent):void 
	{
		// remove this handler
		RegionEvent.removeListener( ModelBaseEvent.ADDED, startingRegionLoaded );
		// now load the file that was designated as the starting region
		RegionEvent.dispatch( new RegionEvent( RegionEvent.LOAD, $re.guid, $re.region ) );
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	static public function requestServerJoin( e:RegionEvent ):void {
		Log.out( "RegionManager.requestServerJoin - guid: " + e.guid, Log.DEBUG );
		Room.createJoinRoom( e.guid );	
	}
	
	static public function requestDefaultRegionLoad( e:RoomEvent ):void {
		Log.out( "RegionManager.requestDefaultRegionLoad", Log.DEBUG );
		var defaultRegionJSON:Object = Globals.g_app.configManager.defaultRegionJson;
		var defaultRegionID:String = defaultRegionJSON.config.region.startingRegion;
		Room.createJoinRoom( defaultRegionID );	
	}
	
	public function onJoinRoomEvent( e:RoomEvent ):void {
		Log.out( "RegionManager.onJoinRoomEvent - guid: " + e.guid, Log.DEBUG );
		RegionEvent.dispatch( new RegionEvent( RegionEvent.LOAD, e.guid ) );
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	
	// this calls the region and its model manager to update
	public function update( $elapsed:int ):void {
		if ( Region.currentRegion )
			Region.currentRegion.update( $elapsed );
	}
	
	// Just assign the dbo from the create to the region
	private function regionCreatedHandler( $pe:PersistanceEvent ):void {
		if ( Globals.DB_TABLE_REGIONS != $pe.table )
			return;
		
		Log.out( "RegionManager.regionCreatedHandler: " + $pe.guid );
		// check for duplicates
		var region:Region = regionGet( $pe.guid )
		if ( region )
			region.dbo = $pe.dbo;
		else	
			Log.out( "RegionManager.regionCreatedHandler: ERROR region not found for returned guid: " + $pe.guid );
	}
	
	/**
	 * @param  - guid of region
	 * @return - region or null
	 * 
	*/
	private function regionGet( $guid:String ):Region
	{
		for each ( var region:Region in _regions ) {
			if ( region && region.guid == $guid ) {
				return region;
			}
		}
		return null;
	}
	
	public function regionHas( $guid:String ):Boolean
	{
		for each ( var region:Region in _regions ) {
			if ( region && region.guid == $guid ) {
				return true;
			}
		}
		return false;
	}

} // RegionManager
} // Package